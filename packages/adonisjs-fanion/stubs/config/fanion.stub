{{{
  exports({ to: app.configPath('fanion.ts') })
}}}
/*
|--------------------------------------------------------------------------
| Fanion Configuration
|--------------------------------------------------------------------------
|
| This file defines the configuration for the Fanion feature flagging
| system in your AdonisJS application.
|
*/

import { defineConfig } from '@fanion/adonisjs'
import env from '#start/env'
import { EnvironmentFlags } from '@fanion/adonisjs'

const fanionConfig = defineConfig({
  /*
  |--------------------------------------------------------------------------
  | Auto Initialize
  |--------------------------------------------------------------------------
  |
  | Whether to automatically initialize the storage provider when the
  | application starts. Set to false if you want to manually control
  | the initialization process.
  |
  */
  autoInit: true,

  /*
  |--------------------------------------------------------------------------
  | Debug Mode
  |--------------------------------------------------------------------------
  |
  | Enable debug logging for feature flag operations. Useful during
  | development to see which flags are being checked and their results.
  |
  */
  debug: env.get('NODE_ENV') === 'development',

  /*
  |--------------------------------------------------------------------------
  | Storage Driver
  |--------------------------------------------------------------------------
  |
  | Configure the storage driver for persistent feature flags.
  | Available drivers: 'memory', 'knex'
  |
  | - memory: Stores flags in memory (not persistent across restarts)
  | - knex: Stores flags in database using Knex.js
  |
  */
  storageDriver: {
    type: 'memory',

    // Uncomment and configure for database storage
    // type: 'knex',
    // config: {
    //   connection: {
    //     client: env.get('DB_CONNECTION'),
    //     connection: {
    //       host: env.get('DB_HOST'),
    //       port: env.get('DB_PORT'),
    //       user: env.get('DB_USER'),
    //       password: env.get('DB_PASSWORD'),
    //       database: env.get('DB_DATABASE'),
    //     },
    //   },
    //   tableName: 'feature_flags',
    //   featureNameColumn: 'feature_name',
    //   valueColumn: 'value',
    // },
  },

  /*
  |--------------------------------------------------------------------------
  | Default Context Provider
  |--------------------------------------------------------------------------
  |
  | A function that provides default context when none is explicitly
  | provided to feature flag checks. This is useful for global context
  | like environment variables or application state.
  |
  */
  defaultContextProvider: () => ({
    environment: env.get('NODE_ENV'),
    appVersion: env.get('APP_VERSION', '1.0.0'),
  }),

  /*
  |--------------------------------------------------------------------------
  | Feature Flag Definitions
  |--------------------------------------------------------------------------
  |
  | Define your feature flags here. You can use simple boolean values,
  | functions for dynamic evaluation, or store them in the database.
  |
  */
  features: [
    // Example: Simple boolean flag stored in database
    {
      name: 'maintenance-mode',
      description: 'Enable maintenance mode for the application',
      store: true,
      defaultValue: false,
    },

    // Example: Environment-based flag
    {
      name: 'debug-toolbar',
      description: 'Show debug toolbar in development',
      check: EnvironmentFlags.developmentOnly(),
    },

    // Example: User-based flag
    {
      name: 'beta-features',
      description: 'Enable beta features for beta users',
      check: (context) => {
        return context.user?.isBetaUser === true
      },
    },

    // Example: Percentage-based rollout
    {
      name: 'new-dashboard',
      description: 'Roll out new dashboard to 25% of users',
      check: (context) => {
        if (!context.user?.id) return false
        return (context.user.id % 100) < 25
      },
    },

    // Example: IP-based flag
    {
      name: 'admin-features',
      description: 'Enable admin features for specific IP ranges',
      check: (context) => {
        const adminIPs = ['127.0.0.1', '192.168.1.0/24']
        return adminIPs.some(ip => context.ip?.startsWith(ip.split('/')[0]))
      },
    },

    // Example: Time-based flag
    {
      name: 'holiday-theme',
      description: 'Enable holiday theme during December',
      check: () => {
        const now = new Date()
        return now.getMonth() === 11 // December (0-indexed)
      },
    },
  ],
})

export default fanionConfig
